<template>
    <div>

        <div v-if="isAjax" class="text-center">
            <p><em>Loading...</em></p>
            <h1><icon icon="spinner" pulse /></h1>
        </div>

        <div v-if="!isAjax">
            <form ref="formElement"  @submit.prevent="upsert">
                <div class="row">
                    {{for field in FieldForms

                        if field.IsPrimaryKey == true
                            continue
                        end
                    }} {{if field.Type == 'text' || field.Type == 'date' || field.Type == 'number' || field.type == 'MultilineText'}}
                            <div class="form-group">
                                    <label for="{{field.Name}}">{{field.Label}}</label>
                                    
                                    {{if field.Type == 'MultilineText'}}
                                        <textarea id="{{field.Name}}"  v-model="form.{{ lowerinit field.Name }}" class="form-control"></textarea>
                                    {{ else }}
                                        <input id="{{field.Name}}" type="{{field.Type}}" v-model="form.{{ lowerinit field.Name }}" class="form-control" placeholder="Enter {{field.Label}}">
                                    {{ end }}

                                    <template v-if="errList && errList.{{field.Name}}">
                                        <p class="text-danger" v-for="err in errList.{{field.Name}}"> {{err}} </p>
                                    </template>
                            </div>
                        {{ end }}
                        {{if field.Type == 'select'}}
                            <div class="form-group">
                                <label for="{{field.Name}}">{{field.Label}}</label>
                                <form-select :options="options{{ field.Name }}"  v-model="form.{{ lowerinit field.Name }}"  ></form-select>
                                
                                <b-button class="btn btn-light" v-b-modal.form-{{field.ForeignEntityName |  string.downcase}}>
                                    <icon icon="plus" class="mr-2 menu-icon" />
                                    Category
                                </b-button>

                                <template v-if="errList && errList.{{ field.Name }}">
                                    <p class="text-danger" v-for="err in errList.{{ field.Name }}"> {{err}} </p>
                                </template>
                            </div>
                        {{end}}
                        {{if field.Type == 'Upload'}}
                            <form-image ref="formImage{{ field.Name }}" :imagebytes="form.{{ field.Name + 'Bytes'}}" v-model="form.{{ lowerinit field.Name}}">
                                <template v-if="errList && errList.{{ field.Name }}">
                                    <p class="text-danger" v-for="err in errList.{{ field.Name }}"> {{err}} </p>
                                </template>
                            </form-image>
                        {{end}}
                {{ end }}
                </div>
                <button v-if="displayBtn" type="submit" class="btn btn-primary" :disabled="isAjax">Save</button>
            </form>

          {{for field in DependentToPrincipalFields}}
            {{if field.IsForeingKey && field.type == 'select'}}
                <!-- MODAL {{field.ForeignEntityName | string.upcase }}-->
                <b-modal id="form-{{field.ForeignEntityName}}" title="{{field.Label}}" ok-only hide-footer>
                    <form-{{field.ForeignEntityName}} v-on:save-success="$bvModal.hide('form-{{field.ForeignEntityName}}')"></form-{{field.ForeignEntityName}}>
                    <div class="modal-footer">
                        <button type="button" @click="$bvModal.hide('form-{{field.ForeignEntityName}}')" class="btn btn-secondary">Close</button>
                        <button type="button" class="btn btn-primary" @click="eventBus.$emit('form-{{field.ForeignEntityName}}::handler','upsert')">Save</button>
                    </div>
                </b-modal>
            {{end}}
          {{end}}
        </div>
    </div>
</template>

<script>

    import _ from 'lodash'
    import { Helper } from '../helper'

    const nameComponent = 'form-{{ModelName | string.downcase}}'


    class {{ModelName}}DTO {
        constructor() {
            {{for field in FieldForms}}
            this.{{ lowerinit field.Name}} = {{ 
            case field.Type 
                when "number" 
                    "0;"
                when "select" 
                    "[];"
                else 
                    "'';"
            end
            }} {{end}}
        }
    }


    export default {
        props: { displayBtn: Boolean },
        data() {
            return {
                isEdit: true,
                isAjax: false,
                form: new {{ModelName}}DTO(),
                errList: { },
                {{for field in DependentToPrincipalFields}} 
                options{{ field.Name }}: [], 
                {{end}}
                apiUrl: ''
            }
        },
        beforeDestroy() {
            this.eventBus.$off(`saveForm::${nameComponent}`)
            this.eventBus.$off(`loadForm::${nameComponent}`)
            this.eventBus.$off(`clearForm::${nameComponent}`)

        },
        created() {
            var vm = this;
            this.apiUrl = this.urls.{{ModelName | string.downcase}}
            console.log(`${nameComponent}::created`)
            this.eventBus.$on(`saveForm::${nameComponent}`, vm.upsert)
            this.eventBus.$on(`loadForm::${nameComponent}`, (row) => vm.loadRecord(row))
            this.eventBus.$on(`clearForm::${nameComponent}`, vm.clearForm)

        },
        methods: {
            clearForm() {
                console.log(`${nameComponent}::clearform`);
                this.form = new {{ModelName}}DTO()
            },
            loadRecord(row) {
                this.isAjax = true;
                this.clearForm();
                var vm = this;
                this.$http.get(vm.apiUrl.getById(row.Id))
                    .then((res) => {
                        let data = res.data
                        Object.assign(vm.form, data);
                    })
                    .catch((err) => { if (err) { console.error(err); } })
                    .then(() => { vm.isAjax = false; })

            },
            upsert(e) {
                this.isAjax = true;
                {{if ContainsFile }}
                    let formData = Helper.createFormData(this.form);
                {{end }}


                {{for field in FieldForms}} {{ if field.Type == 'Upload'}}
                if (this.$refs.formImage{{ field.Name }}.isImageDeleted()) {
                    formData.append('imageDeleted{{ field.Name }}', true)
                }{{end}}{{ end }}

                var vm = this;
                this.$http({
                    method: vm.form.id ? 'put' : 'post',
                    url: this.apiUrl.upsert(vm.form.id),
                    data: {{ if ContainsFile }} formData {{else}} vm.form {{end}},
                }).then(function (result) {
                    vm.errList = null;
                    vm.clearForm();
                    vm.eventBus.$emit(`reloadTable::${nameComponent}`)
                }).catch(function (error) {
                    if (error) {
                        if (error.response) {
                            vm.errList = error.response.data.errors;
                        }
                        console.error(error);
                    }
                }).then(function () {
                    vm.isAjax = false;
                });
            },
        }
    }
</script>

<style>
</style>
